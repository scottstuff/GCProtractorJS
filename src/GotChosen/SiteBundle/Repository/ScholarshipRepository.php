<?php

namespace GotChosen\SiteBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use GotChosen\SiteBundle\Entity\Scholarship;
use GotChosen\Util\Enums;

/**
 * ScholarshipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ScholarshipRepository extends EntityRepository
{
    /**
     * @return Scholarship[]
     */
    public function getCurrentScholarships()
    {
        $now = new \DateTime('now');
        return $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.startDate <= ?1')
            ->andWhere('s.endDate >= ?2')
            ->setParameters([1 => $now, 2 => $now])
            ->getQuery()
            ->getResult();
    }

    public function getCurrentOfType($type)
    {
        return $this->getByTypeAndDate($type, new \DateTime('now'));
    }

    public function getByTypeAndDate($type, \DateTime $date)
    {
        Enums::assert($type, Scholarship::$scholarshipTypes);

        try {
            return $this->createQueryBuilder('s')
                ->select('s')
                ->where('s.startDate <= ?1')
                ->andWhere('s.endDate >= ?2')
                ->andWhere('s.scholarshipType = ?3')
                ->setMaxResults(1)
                ->setParameters([1 => $date, 2 => $date, 3 => $type])
                ->getQuery()
                ->getSingleResult();
        } catch ( NoResultException $e ) {
            return null;
        }
    }
    
    public function getAll40kAndMonthly($sort = 'DESC')
    {
        return $this->createQueryBuilder('s')
                ->select('s')
                ->where('s.scholarshipType = ?1')
                ->orWhere('s.scholarshipType = ?2')
                ->orderBy('s.endDate', $sort)
                ->setParameters([1 => Scholarship::TYPE_40K, 2 => Scholarship::TYPE_MONTHLY])
                ->getQuery()
                ->getResult();
    }

    public function getCurrent40K()
    {
        return $this->getCurrentOfType(Scholarship::TYPE_40K);
    }

    public function getCurrentMonthly()
    {
        return $this->getCurrentOfType(Scholarship::TYPE_MONTHLY);
    }

    /**
     * @param bool $defaultEmpty If true, instead of returning null, returns a fake Scholarship with ID 0
     * @return Scholarship|mixed
     */
    public function getCurrentEvoGames($defaultEmpty = true)
    {
        $s = $this->getCurrentOfType(Scholarship::TYPE_EVOGAMES);
        if ( $s ) {
            return $s;
        }

        if ( !$defaultEmpty ) {
            return null;
        }

        return Scholarship::createFake(Scholarship::TYPE_EVOGAMES);
    }

    public function get40KByDate(\DateTime $date)
    {
        return $this->getByTypeAndDate(Scholarship::TYPE_40K, $date);
    }

    public function getMonthlyByDate(\DateTime $date)
    {
        return $this->getByTypeAndDate(Scholarship::TYPE_MONTHLY, $date);
    }

    public function getEvoGamesByDate(\DateTime $date)
    {
        return $this->getByTypeAndDate(Scholarship::TYPE_EVOGAMES, $date);
    }
    
    public function getCurrentVideo()
    {
        return $this->getCurrentOfType(Scholarship::TYPE_VIDEO);
    }
    
}
