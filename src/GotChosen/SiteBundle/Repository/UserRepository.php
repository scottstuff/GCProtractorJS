<?php

namespace GotChosen\SiteBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;
use GotChosen\SiteBundle\Entity\NotificationSub;
use GotChosen\SiteBundle\Entity\NotificationType;
use GotChosen\SiteBundle\Entity\ProfileProperty;
use GotChosen\SiteBundle\Entity\User;
use GotChosen\SiteBundle\Entity\UserProfile;
use GotChosen\User\UserPropertyHandler;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /** @var UserPropertyHandler */
    private $propertyHandler = null;

    public function setPropertyHandler(UserPropertyHandler $handler)
    {
        $this->propertyHandler = $handler;
    }

    public function installDefaultNotifications(User $user)
    {
        $em = $this->getEntityManager();
        /** @var NotificationTypeRepository $ntrepo */
        $ntrepo = $em->getRepository('GotChosenSiteBundle:NotificationType');

        /** @var NotificationType $ntype */
        foreach ( $ntrepo->getDefaults() as $ntype ) {
            $sub = NotificationSub::make($user, $ntype);
            $em->persist($sub);
        }

        $em->flush();
    }

    public function setProperty(User $user, $key, $value, $visibility = null, $forceClear = false)
    {
        // hate this, but alternatives will take a long time to implement and restructure.
        if ( !$this->propertyHandler ) {
            throw new \RuntimeException('Call setPropertyHandler before setProperty');
        }

        $propReference = $this->getPropertyReference($key);
        if ( !$propReference ) {
            return false;
        }

        $property = $this->getProfileProperty($user, $key);
        if ( $property === null && !empty($value) ) {
            $newProp = new UserProfile();
            $newProp->setUser($user);
            $newProp->setProperty($propReference);
            $newProp->setPropertyValue($value);
            $newProp->setVisibility($visibility ?: $propReference->getDefaultVisibility());
            $this->getEntityManager()->persist($newProp);
        }
        else if ( $property ) {
            // for file fields, do not overwrite if the given value is blank.
            if ( $propReference->getFieldType() === ProfileProperty::TYPE_FILE
                && empty($value) && !$forceClear ) {
                // Set property visibility when bailing early
                // Maybe fix this for less code duplication later
                if ( $visibility !== null ) {
                    $property->setVisibility($visibility);
                }
                $property->setLastModified(new \DateTime('now'));
                $this->getEntityManager()->flush();
                return true;
            }

            // remove old property and clean up (remove files, etc.)
            $this->propertyHandler->cleanup($property);

            $property->setPropertyValue($value);
            if ( $visibility !== null ) {
                $property->setVisibility($visibility);
            }
            $property->setLastModified(new \DateTime('now'));
        }

        $this->getEntityManager()->flush();

        return true;
    }

    public function getProfileProperty(User $user, $key)
    {
        $q = $this->getEntityManager()->createQuery(
            'SELECT up FROM GotChosenSiteBundle:UserProfile up
             JOIN up.property p
             WHERE up.user = ?1 AND p.name = ?2');
        $q->setParameter(1, $user->getId());
        $q->setParameter(2, $key);

        try {
            return $q->getSingleResult();
        } catch ( NoResultException $e ) {
            return null;
        }
    }

    public function precacheProperties(User $user)
    {
        $q = $this->getEntityManager()->createQuery(
            'SELECT up.propertyValue, p.name FROM GotChosenSiteBundle:UserProfile up
             JOIN up.property p
             WHERE up.user = ?1');
        $q->setParameter(1, $user->getId());

        $results = $q->getResult();
        $properties = [];
        foreach ( $results as $result ) {
            $properties[$result['name']] = $result['propertyValue'];
        }

        $user->setCachedProperties($properties);
    }

    public function precachePropertiesMulti(array $users, array $limitProps = [])
    {
        if ( empty($users) ) {
            return;
        }

        /** @var User[] $userList */
        $userList = [];
        /** @var User[] $users */
        foreach ( $users as $u ) {
            $userList[$u->getId()] = $u;
        }

        $userIds = array_map(function(User $v) { return $v->getId(); }, $userList);
        $addl = empty($limitProps) ? '' : 'AND p.name IN (:props)';

        $q = $this->getEntityManager()->createQuery(
            'SELECT up.propertyValue, p.name, u.id userId FROM GotChosenSiteBundle:UserProfile up
             JOIN up.property p
             JOIN up.user u
             WHERE up.user IN (:users) ' . $addl
        );
        $q->setParameter('users', $userIds);
        if ( $addl ) {
            $q->setParameter('props', $limitProps);
        }

        $results = $q->getResult();
        $properties = [];
        foreach ( $results as $result ) {
            $uid = $result['userId'];
            if ( !isset($properties[$uid]) ) {
                $properties[$uid] = [];
            }
            $properties[$uid][$result['name']] = $result['propertyValue'];
        }

        foreach ( $properties as $uid => $proplist ) {
            $userList[$uid]->setCachedProperties($proplist);
        }
    }

    /**
     * @param $name
     * @return ProfileProperty
     */
    public function getPropertyReference($name)
    {
        return $this->getEntityManager()->getRepository('GotChosenSiteBundle:ProfileProperty')
            ->findOneBy(['name' => $name]);
    }

    public function getPropertyReferences(array $names)
    {
        $q = $this->getEntityManager()->createQuery(
            'SELECT pp FROM GotChosenSiteBundle:ProfileProperty pp INDEX BY pp.name
             WHERE pp.name IN(?1)');
        $q->setParameter(1, $names);

        return $q->getResult();
    }

    public function getProperties(User $user, $includeGroups = false)
    {
        $gSelect = "";
        $gJoin = "";
        if ( $includeGroups ) {
            $gSelect = "g, ";
            $gJoin = "JOIN p.groups g";
        }

        $q = $this->getEntityManager()->createQuery(
            "SELECT up, p, {$gSelect} vn FROM GotChosenSiteBundle:UserProfile up
             JOIN up.property p
             {$gJoin}
             LEFT JOIN up.visibleNetworks vn
             WHERE up.user = ?1");
        $q->setParameter(1, $user->getId());

        return $q->getResult();
    }

    public function getPropertyGroups($onlyVisible = true)
    {
        $q = $this->getEntityManager()->createQueryBuilder()
            ->select('pg')
            ->from('GotChosenSiteBundle:ProfilePropertyGroup', 'pg', 'pg.id');

        if ( $onlyVisible ) {
            $q->where('pg.visibility != ?1')->setParameter(1, UserProfile::VISIBLE_PRIVATE);
        }

        return $q->getQuery()->getResult();
    }

    public function getNumActiveUsers()
    {
        return $this->getNumUsersByStatus(User::STATUS_ACTIVE);
    }

    public function getNumUsersRegisteredLastMonth()
    {
        $lastMonth = date('Y-m-d 00:00:00', strtotime('first day of previous month'));
        $thisMonth = date('Y-m-01 00:00:00');

        $q = $this->getEntityManager()->createQueryBuilder()
                ->select('COUNT(u.id)')
                ->from('GotChosenSiteBundle:User', 'u')
                ->where('u.enabled = 1 AND u.createdDate >= :lastMonth AND u.createdDate < :thisMonth')
                ->setParameter('lastMonth', $lastMonth)
                ->setParameter('thisMonth', $thisMonth);

        return $q->getQuery()->getSingleScalarResult();
    }

    public function getNumUsersRegisteredMonthToDate()
    {
        $thisMonth = date('Y-m-01 00:00:00');

        $q = $this->getEntityManager()->createQueryBuilder()
                ->select('COUNT(u.id)')
                ->from('GotChosenSiteBundle:User', 'u')
                ->where('u.enabled = 1 AND u.createdDate >= :thisMonth')
                ->setParameter('thisMonth', $thisMonth);

        return $q->getQuery()->getSingleScalarResult();
    }

    public function getNumUsers()
    {
        $q = $this->getEntityManager()->createQueryBuilder()
                ->select('COUNT(u.id)')
                ->from('GotChosenSiteBundle:User', 'u');

        return $q->getQuery()->getSingleScalarResult();
    }

    public function getNumUsersByStatus($status)
    {
        $q = $this->getEntityManager()->createQueryBuilder()
                ->select('COUNT(u.id)')
                ->from('GotChosenSiteBundle:User', 'u')
                ->where('u.status = :status')
                ->setParameter('status', $status);

        return $q->getQuery()->getSingleScalarResult();
    }

    public function getNumUsersByAllStatuses()
    {
        $q = $this->getEntityManager()->createQueryBuilder()
                ->select('u.status, COUNT(u.status) AS num')
                ->from('GotChosenSiteBundle:User', 'u')
                ->groupBy('u.status');

        return $q->getQuery()->getResult();
    }

    public function getNumUsersByAdminSearch($searchTerm)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $q = $qb
            ->select('COUNT(u.id)')
            ->from('GotChosenSiteBundle:User', 'u')
            ->where($qb->expr()->like('u.username', ':searchTerm'))
            ->orWhere($qb->expr()->like('u.email', ':searchTerm'))
            ->setParameter('searchTerm', '%' . $searchTerm . '%')
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        return $q->getQuery()->getSingleScalarResult();
    }

    public function findUsersByAdminSearch($searchTerm, $limit, $offset)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $q = $qb
            ->select('u')
            ->from('GotChosenSiteBundle:User', 'u')
            ->where($qb->expr()->like('u.username', ':searchTerm'))
            ->orWhere($qb->expr()->like('u.email', ':searchTerm'))
            ->setParameter('searchTerm', '%' . $searchTerm . '%')
            ->orderBy('u.username', 'ASC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        return $q->getQuery()->getResult();
    }

    /**
     * Stew is working on a plan to re-index some database tables.
     * We can't use this method until that's done as it's painfully
     * slow.
     */
    public function findUserByProfileProperty($propName, $propValue)
    {
        $q = $this->getEntityManager()->createQueryBuilder()
                ->select('u')
                ->from('GotChosenSiteBundle:User', 'u')
                ->innerJoin('GotChosenSiteBundle:UserProfile', 'up', 'ON', 'u.id = up.user')
                ->innerJoin('GotChosenSiteBundle:ProfileProperty', 'pp', 'ON', 'pp.id = up.property')
                ->where('pp.name = :propName')
                ->andWhere('up.propertyValue = :propValue')
                ->setParameter('propName', $propName)
                ->setParameter('propValue', $propValue);

        return $q->getQuery()->getSingleResult();
    }
}
