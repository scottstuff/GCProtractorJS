<?php

namespace GotChosen\SiteBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\QueryException;
use GotChosen\SiteBundle\Entity\EGGame;
use GotChosen\SiteBundle\Entity\Scholarship;
use GotChosen\SiteBundle\Entity\User;
use GotChosen\Util\Dates;

/**
 * EGFeedbackRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EGFeedbackRepository extends EntityRepository
{
    public function fetchFeedbackForGame(EGGame $game)
    {
        $q = $this->getEntityManager()->createQuery(
            'SELECT f, u FROM GotChosenSiteBundle:EGFeedback f
             JOIN f.user u
             WHERE f.game = :game
             ORDER BY f.createdDate');
        $q->setParameter('game', $game->getId());

        return $q->getResult();
    }

    public function fetchHighestFeedback(EGGame $game, User $user, $month)
    {
        $q = $this->getEntityManager()->createQuery(
            'SELECT MAX(f.developerRating) FROM GotChosenSiteBundle:EGFeedback f
             WHERE f.game = :game
                 AND f.user = :user
                 AND f.createdDate >= :start
                 AND f.createdDate < :end'
        );
        $q->setParameter('game', $game->getId());
        $q->setParameter('user', $user->getId());
        $q->setParameter('start', $month . '-01 00:00:00');
        $q->setParameter('end', Dates::nextMonth($month) . '-01 00:00:00');

        try {
            return (int) $q->getSingleScalarResult();
        } catch ( QueryException $e ) {
            return 0;
        }
    }

    public function recalcFeedbackPoints(User $user, Scholarship $scholarship, $month)
    {
        $em = $this->getEntityManager();
        $conn = $em->getConnection();
        /** @var EGPlayerStatsRepository $statsRepo */
        $statsRepo = $em->getRepository('GotChosenSiteBundle:EGPlayerStats');

        // grab all the rated games with their highest ratings
        $stmt = $conn->prepare(
            'SELECT f.game_id, MAX(f.developerRating) max_rating
             FROM EGFeedback f
             WHERE f.user_id = :user
                 AND f.createdDate >= :start
                 AND f.createdDate < :end
                 AND f.ratedDate IS NOT NULL
             GROUP BY f.game_id
             ORDER BY max_rating DESC'
        );

        $stmt->bindValue('user', $user->getId(), \PDO::PARAM_INT);
        $stmt->bindValue('start', $month . '-01 00:00:00', \PDO::PARAM_STR);
        $stmt->bindValue('end', Dates::nextMonth($month) . '-01 00:00:00', \PDO::PARAM_STR);

        $stmt->execute();

        $totalFeedback = 0;
        $count = 0;
        while ( $row = $stmt->fetch() ) {
            $totalFeedback += $row['max_rating'];
            $count++;
            // stop at 100 feedback or 20 games
            if ( $totalFeedback >= 100 || $count >= 20 ) {
                break;
            }
        }

        $totalFeedback = min($totalFeedback, 100);
        $pstats = $statsRepo->getOrCreate($user, $scholarship, $month);
        $pstats->setFeedbackPoints($totalFeedback);
        $pstats->updateTotalPoints();
        $em->flush();
    }
}
