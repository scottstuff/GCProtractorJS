<?php

namespace GotChosen\SiteBundle\Repository;

use Doctrine\ORM\EntityRepository;
use GotChosen\SiteBundle\Entity\EGGame;
use GotChosen\SiteBundle\Entity\EGGameResult;
use GotChosen\SiteBundle\Entity\User;

/**
 * EGGameResultRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EGGameResultRepository extends EntityRepository
{
    public function getOrCreate(EGGame $game, User $user, $month)
    {
        $this->assertMonth($month);

        $result = $this->findOneBy([
            'game' => $game->getId(),
            'user' => $user->getId(),
            'statsMonth' => $month,
        ]);

        if ( $result !== null ) {
            return $result;
        }

        $result = new EGGameResult();
        $result
            ->setGame($game)
            ->setUser($user)
            ->setStatsMonth($month)
            ->setPlays(0)
            ->setWins(0)
            ->setLosses(0);

        $this->getEntityManager()->persist($result);
        return $result;
    }

    /**
     * @param User $user
     * @param $month
     * @return EGGameResult[]
     */
    public function findResultsForProfile(User $user, $month)
    {
        $this->assertMonth($month);

        $q = $this->getEntityManager()->createQuery(
            'SELECT gr, g FROM GotChosenSiteBundle:EGGameResult gr
             JOIN gr.game g
             WHERE gr.statsMonth = :month AND gr.user = :user
             ORDER BY g.gameName'
        );
        $q->setParameter('month', $month);
        $q->setParameter('user', $user->getId());

        return $q->getResult();
    }

    /**
     * @param User $user
     * @param $month
     * @return integer
     */
    public function getTotalWins(User $user, $month)
    {
        $this->assertMonth($month);

        $q = $this->getEntityManager()->createQuery(
            'SELECT SUM(gr.wins) FROM GotChosenSiteBundle:EGGameResult gr
             WHERE gr.statsMonth = :month AND gr.user = :user'
        );
        $q->setParameter('month', $month);
        $q->setParameter('user', $user->getId());

        return $q->getSingleScalarResult() ?: 0; // This function was returning NULL instead of 0
    }

    private function assertMonth($month)
    {
        if ( !preg_match('/^\d{4}-\d{2}$/', $month) ) {
            throw new \InvalidArgumentException('Month must be YYYY-MM');
        }
    }
}
