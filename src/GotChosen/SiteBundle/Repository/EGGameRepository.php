<?php

namespace GotChosen\SiteBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use GotChosen\SiteBundle\Entity\EGGame;
use GotChosen\SiteBundle\Entity\EGGameGenre;
use GotChosen\SiteBundle\Entity\EGPlaySession;
use GotChosen\SiteBundle\Entity\EGGameScholarships;
use GotChosen\SiteBundle\Entity\Scholarship;
use GotChosen\Util\Enums;

/**
 * EGGameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EGGameRepository extends EntityRepository
{
    protected function getMedianScoreForDay(EGGame $game, $phase, \DateTime $day)
    {
        $medianQuery = '
            SELECT AVG(t1.score) AS median_val, t2.total_rows FROM (
                SELECT @rownum:=@rownum+1 as `row_number`, d.score
                FROM GamePlaySession d, (SELECT @rownum:=0) r
                WHERE d.game_id = :gameId AND d.isCompleted = 1 AND d.phase = :phase
                    AND d.endDate BETWEEN :dateStart AND :dateEnd
                ORDER BY d.score
            ) as t1, (
                SELECT count(*) as total_rows
                FROM GamePlaySession d
                WHERE d.game_id = :gameId AND d.isCompleted = 1 AND d.phase = :phase
                    AND d.endDate BETWEEN :dateStart AND :dateEnd
            ) as t2
            WHERE 1
            AND t1.row_number in ( floor((total_rows+1)/2), floor((total_rows+2)/2) )';

        $conn = $this->getEntityManager()->getConnection();

        $stmt = $conn->prepare($medianQuery);
        $stmt->bindValue('gameId', $game->getId(), \PDO::PARAM_INT);
        $stmt->bindValue('phase', $phase, \PDO::PARAM_INT);
        $stmt->bindValue('dateStart', $day->format('Y-m-d 00:00:00'), \PDO::PARAM_STR);
        $stmt->bindValue('dateEnd', $day->format('Y-m-d 23:59:59'), \PDO::PARAM_STR);
        $stmt->execute();

        $row = $stmt->fetch();
        if ( !$row ) {
            return false;
        }

        return $row['median_val'];
    }

    /**
     * @param EGGame $game
     * @param $phase
     * @param \DateTime $day
     * @return array of "[user => User entity, score => float, isWin => bool, percentile => float]"
     */
    public function getContestPlaysForDay(EGGame $game, $phase, \DateTime $day)
    {
        Enums::assert($phase, EGPlaySession::$phases);

        $median = $this->getMedianScoreForDay($game, $phase, $day);
        if ( !$median ) {
            return [];
        }

        $q = $this->getEntityManager()->createQuery(
            'SELECT gs, u FROM GotChosenSiteBundle:EGPlaySession gs
             JOIN gs.player u
             WHERE gs.game = :gameId
                AND gs.phase = :phase
                AND gs.isCompleted = 1
                AND gs.endDate >= :dateStart
                AND gs.endDate <= :dateEnd
             ORDER BY gs.score DESC'
        );
        // AND gs.score > :median
        $q->setParameter('gameId', $game->getId());
        $q->setParameter('phase', $phase);
        $q->setParameter('dateStart', $day->format('Y-m-d 00:00:00'));
        $q->setParameter('dateEnd', $day->format('Y-m-d 23:59:59'));
        //$q->setParameter('median', $median);

        /** @var EGPlaySession[] $winningSessions */
        $winningSessions = $q->execute();
        $sessionCount = count($winningSessions);

        // so, reworking now.
        // we need *ALL* winning records, not just unique users.
        $users = [];
        $count = 0;
        foreach ( $winningSessions as $session ) {
            $user = $session->getPlayer();
            $score = $session->getScore();
            $isWin = $sessionCount == 1 || $score > $median;

            $users[] = [
                'user'  => $user,
                'score' => $score,
                'isWin' => $isWin,
            ];

            if ( $isWin ) {
                $count++;
            }
        }

        // get percentiles from records that will receive points
        $count = max(1, $count - 1);
        $index = 0;
        foreach ( $users as &$rec ) {
            if ( $rec['isWin'] ) {
                $rec['percentile'] = 1.0 - (0.5 * $index / $count); // ranges from 1.0 to 0.5
                $index++;
            } else {
                $rec['percentile'] = 0;
            }
        }

        return $users;
    }

    public function isInContest(EGGame $game, Scholarship $scholarship)
    {
        $gsRepo = $this->getEntityManager()->getRepository('GotChosenSiteBundle:EGGameScholarships');
        $res = $gsRepo->findOneBy([
            'game' => $game->getId(),
            'scholarship' => $scholarship->getId(),
            'scholarshipType' => EGGameScholarships::TYPE_CONTEST,
        ]);

        return $res !== null;
    }

    public function isInQualifier(EGGame $game, Scholarship $scholarship)
    {
        $q = $this->getEntityManager()->createQuery(
            'SELECT g FROM GotChosenSiteBundle:EGGame g
             LEFT JOIN g.scholarships gs
             WHERE g.id = :game AND (gs.scholarship IS NULL OR gs.scholarship != :sship)'
        );
        $q->setParameter('game', $game->getId());
        $q->setParameter('sship', $scholarship->getId());

        $res = $q->getResult();
        return count($res) > 0;
    }

    public function findContestGames(Scholarship $scholarship)
    {
        $q = $this->getEntityManager()->createQuery(
            'SELECT g, st, gen FROM GotChosenSiteBundle:EGGame g '
                . 'LEFT JOIN g.scholarships gs '
                . 'LEFT JOIN g.statistics st '
                . 'LEFT JOIN g.genre gen '
                . 'WHERE gs.scholarship = :sship AND gs.scholarshipType = :scholarshipType '
                . 'AND st.statsMonth = :statsMonth '
                . 'ORDER BY st.monthPlays DESC'
        );
        $q->setParameter('sship', $scholarship->getId());
        $q->setParameter('scholarshipType', EGGameScholarships::TYPE_CONTEST);
        $q->setParameter('statsMonth', date('Y-m'));

        return $q->execute();
    }

    public function findQualifierGamesByRank(Scholarship $scholarship, $month, $limit = 10)
    {
        $q = $this->getEntityManager()->createQuery(
            'SELECT g, st FROM GotChosenSiteBundle:EGGame g
             LEFT JOIN g.scholarships gs
             JOIN g.statistics st
             WHERE g.status = :gameStatus AND st.statsMonth = :statsMonth
                 AND (gs.scholarship IS NULL OR gs.scholarship != :sship)
             ORDER BY st.rank ASC'
        );
        $q->setMaxResults($limit);

        $q->setParameter('gameStatus', EGGame::STATUS_ACTIVE);
        $q->setParameter('statsMonth', $month);
        $q->setParameter('sship', $scholarship->getId());

        return $q->execute();
    }

    public function findContestGamesByRank(Scholarship $scholarship, $month, $limit = 10)
    {
        $q = $this->getEntityManager()->createQuery(
            'SELECT g, st FROM GotChosenSiteBundle:EGGame g
             JOIN g.scholarships gs
             JOIN g.statistics st
             WHERE gs.scholarship = :sship AND gs.scholarshipType = :scholarshipType
                 AND st.statsMonth = :statsMonth
             ORDER BY st.rank ASC'
        );
        $q->setMaxResults($limit);

        $q->setParameter('sship', $scholarship->getId());
        $q->setParameter('scholarshipType', EGGameScholarships::TYPE_CONTEST);
        $q->setParameter('statsMonth', $month);

        return $q->execute();
    }

    public function countQualifierGames(Scholarship $scholarship, $gameName = null,
                                        $gameStudio = null, EGGameGenre $genre = null)
    {
        $em = $this->getEntityManager();
        $where = "";

        if ( $gameName ) {
            $where .= " AND g.gameName LIKE :gameName ";
        }

        if ( $gameStudio ) {
            $where .= " AND g.studioName LIKE :gameStudio ";
        }

        if ( $genre ) {
            $where .= " AND g.genre = :genre ";
        }

        $q = $em->createQuery(
            'SELECT COUNT(g.id) FROM GotChosenSiteBundle:EGGame g
             LEFT JOIN g.scholarships gs
             WHERE g.status = :gameStatus
                 ' . $where . '
             AND (gs.scholarship IS NULL OR gs.scholarship != :sship)');

        $q->setParameter('gameStatus', EGGame::STATUS_ACTIVE);
        $q->setParameter('sship', $scholarship->getId());

        if ( $gameName ) {
            $q->setParameter('gameName', "%$gameName%");
        }

        if ( $gameStudio ) {
            $q->setParameter('gameStudio', "%$gameStudio%");
        }

        if ( $genre ) {
            $q->setParameter('genre', $genre->getId());
        }

        return $q->getSingleScalarResult();
    }
    
    public function findQualifierGames(Scholarship $scholarship,
            $gameName = null, $gameStudio = null, EGGameGenre $genre = null, $seed = null, $offset = 0, $limit = 20)
    {
        $em = $this->getEntityManager();
        
        $rsm = new ResultSetMappingBuilder($em);
        $rsm->addRootEntityFromClassMetadata('GotChosenSiteBundle:EGGame', 'g');
        
        $where = "";
        
        if ( $gameName ) {
            $where .= " AND g.gameName LIKE :gameName ";
        }
        
        if ( $gameStudio ) {
            $where .= " AND g.studioName LIKE :gameStudio ";
        }
        
        if ( $genre ) {
            $where .= " AND g.genre_id = :genre ";
        }
        
        $q = $em->createNativeQuery(
                'SELECT * FROM Games g '
                . 'LEFT JOIN game_scholarships gs ON (g.id = gs.game_id) '
                . 'WHERE g.status = :gameStatus '
                . $where
                . 'AND (gs.scholarship_id IS NULL OR gs.scholarship_id != :sship) '
                . 'ORDER BY RAND(:seed) '
                . 'LIMIT :off, :lim'
        , $rsm);
        $q->setParameter('gameStatus', EGGame::STATUS_ACTIVE);
        $q->setParameter('sship', $scholarship->getId());
        $q->setParameter('seed', $seed === null ? microtime(true) : $seed);
        $q->setParameter('off', (int) $offset);
        $q->setParameter('lim', (int) $limit);
        
        if ( $gameName ) {
            $q->setParameter('gameName', "%$gameName%");
        }
        
        if ( $gameStudio ) {
            $q->setParameter('gameStudio', "%$gameStudio%");
        }
        
        if ( $genre ) {
            $q->setParameter('genre', $genre->getId());
        }

        return $q->getResult();
    }
    
    public function findPopularQualifierGames(Scholarship $scholarship,
            $gameName = null, $gameStudio = null, EGGameGenre $genre = null, $offset = 0, $limit = 20)
    {
        $em = $this->getEntityManager();
        
        $where = "";
        
        if ( $gameName ) {
            $where .= " AND g.gameName LIKE :gameName ";
        }
        
        if ( $gameStudio ) {
            $where .= " AND g.studioName LIKE :gameStudio ";
        }
        
        if ( $genre ) {
            $where .= " AND g.genre = :genre ";
        }
        
        $q = $em->createQuery(
                'SELECT g FROM GotChosenSiteBundle:EGGame g '
                . 'LEFT JOIN g.scholarships gs '
                . 'LEFT JOIN g.statistics st '
                . 'WHERE g.status = :gameStatus AND st.statsMonth = :statsMonth '
                . $where
                . 'AND (gs.scholarship IS NULL OR gs.scholarship != :sship)'
                . 'ORDER BY st.monthPlays DESC'
        );
        $q->setParameter('gameStatus', EGGame::STATUS_ACTIVE);
        $q->setParameter('statsMonth', date('Y-m'));
        $q->setParameter('sship', $scholarship->getId());
        $q->setFirstResult($offset);
        $q->setMaxResults($limit);
        
        if ( $gameName ) {
            $q->setParameter('gameName', "%$gameName%");
        }
        
        if ( $gameStudio ) {
            $q->setParameter('gameStudio', "%$gameStudio%");
        }
        
        if ( $genre ) {
            $q->setParameter('genre', $genre->getId());
        }
        
        return $q->getResult();
    }
    
    public function findChampionshipGames(Scholarship $scholarship)
    {
        $q = $this->getEntityManager()->createQuery(
            'SELECT g FROM GotChosenSiteBundle:EGGame g '
                . 'LEFT JOIN g.scholarships gs '
                . 'WHERE gs.scholarship = :sship AND gs.scholarshipType = :scholarshipType'
        );
        $q->setParameter('sship', $scholarship->getId());
        $q->setParameter('scholarshipType', EGGameScholarships::TYPE_CHAMPIONSHIP);

        return $q->execute();
    }
}
