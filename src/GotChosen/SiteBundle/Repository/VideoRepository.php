<?php

namespace GotChosen\SiteBundle\Repository;

use GotChosen\SiteBundle\Entity\Video;
use GotChosen\SiteBundle\Entity\VideoCategory;
use GotChosen\SiteBundle\Entity\VideoStatus;
use GotChosen\SiteBundle\Entity\VideoVote;
use GotChosen\SiteBundle\Entity\Scholarship;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * VideoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VideoRepository extends EntityRepository
{
    
/*public function findVideos($scholarship, $seed = null)
    {
        if ( !$scholarship ) {
            return [];
        }
        $em = $this->getEntityManager();
        $scholarshipid = $scholarship->getId();
        $rsm = new ResultSetMappingBuilder($em);
        $rsm->addRootEntityFromClassMetadata('GotChosenSiteBundle:Video', 'v');
        
        $q = $em->createNativeQuery(
                'SELECT * FROM Video v '
                . 'LEFT JOIN Scholarships s ON (v.scholarship_id = s.idScholarships) '
                . 'WHERE s.idScholarships = :sship '
                . 'ORDER BY RAND(:seed) '
        , $rsm);
        $q->setParameter('sship', $scholarshipid);
        $q->setParameter('seed', $seed === null ? microtime(true) : $seed);        

        return $q->getResult();
    }*/
    
    public function findVideosPaged($scholarship, VideoCategory $category = null, $videoTitle = null, $email = null, $seed = null, $offset = 0, $limit = 20)
    {
        if ( !$scholarship ) {
            return [];
        }

        $em = $this->getEntityManager();
        $scholarshipid = $scholarship->getId();
        $rsm = new ResultSetMappingBuilder($em);
        $rsm->addRootEntityFromClassMetadata('GotChosenSiteBundle:Video', 'v');

        $where = "";
        
        if ( $videoTitle ) {
            $where .= " AND v.title LIKE :videoTitle ";
        }
        
        if ( $email ) {
            $where .= " AND u.email_canonical LIKE :email ";
            $email = strtolower($email);
        }
        
        if ( $category ) {
            $where .= " AND v.category_id = :videoCategory ";
        }
        
        $q = $em->createNativeQuery(
                'SELECT v.* FROM Video v '
                . 'LEFT JOIN Scholarships s ON (v.scholarship_id = s.idScholarships) '
                . 'LEFT JOIN User u ON v.user_id = u.id '
                . 'WHERE s.idScholarships = :sship '
                . $where
                . ' AND v.status_id = 1 AND u.status = :userStatus '
                . 'ORDER BY RAND(:seed) '
                . 'LIMIT :off, :lim'                
        , $rsm);
        $q->setParameter('sship', $scholarshipid);
        $q->setParameter('seed', $seed === null ? microtime(true) : $seed);
        $q->setParameter('off', (int) $offset);
        $q->setParameter('lim', (int) $limit);  
        $q->setParameter('userStatus', 'active');
        

        if ( $videoTitle ) {
            $q->setParameter('videoTitle', "%$videoTitle%");
        }
        
        if ( $email ) {
            $q->setParameter('email', '%' . $email . '%');
        }
        
        if ( $category ) {
            $q->setParameter('videoCategory', $category->getId());
        }        
        
        return $q->getResult();
    }    
    
    public function findTop20Videos($scholarship, $seed = null)
    {
        if ( !$scholarship ) {
            return [];
        }
        $em = $this->getEntityManager();
        $scholarshipid = $scholarship->getId();
        $rsm = new ResultSetMappingBuilder($em);
        $rsm->addRootEntityFromClassMetadata('GotChosenSiteBundle:Video', 'v');
        
        $q = $em->createNativeQuery(
                'SELECT v.* FROM Video v '
                . 'LEFT JOIN Scholarships s ON (v.scholarship_id = s.idScholarships) '
                . 'LEFT JOIN User u ON v.user_id = u.id '
                . 'WHERE s.idScholarships = :sship AND v.status_id = 1 AND u.status = :userStatus '
                . 'ORDER BY (SELECT COUNT(vote.id) FROM VideoVote vote WHERE vote.video_id = v.id) DESC, RAND(:seed) LIMIT 20'
        , $rsm);
        $q->setParameter('sship', $scholarshipid);
        $q->setParameter('seed', $seed === null ? microtime(true) : $seed);        
        $q->setParameter('userStatus', 'active');

        return $q->getResult();
    }    
    
    /*public function countVideos($scholarship)
    {
        if ( !$scholarship ) {
            return 0;
        }

        $em = $this->getEntityManager();
        $scholarshipid = $scholarship->getId();
        
        $q = $em->createQuery(
                'SELECT count(v.id) FROM GotChosenSiteBundle:Video v '
                . 'LEFT JOIN v.scholarship s '
                . 'WHERE s.id = :sship AND v.status = 1 ');
        $q->setParameter('sship', $scholarshipid);

        return $q->getSingleScalarResult();
    }    */
    
    public function countVideosFiltered($scholarship, $videoTitle = null, $email = null, VideoCategory $category = null)
    {
        if ( !$scholarship ) {
            return 0;
        }

        $em = $this->getEntityManager();
        $scholarshipid = $scholarship->getId();

        $where = "";
        
        if ( $videoTitle ) {
            $where .= " AND v.title LIKE :videoTitle ";
        }
        
        if ( $email ) {
            $where .= " AND u.email LIKE :email ";
            $email = strtolower($email);
        }
        
        if ( $category ) {
            $where .= " AND v.category = :videoCategory ";
        }        
        
        $q = $em->createQuery(
                'SELECT count(v.id) FROM GotChosenSiteBundle:Video v '
                . 'LEFT JOIN v.scholarship s '
                . 'LEFT JOIN v.user u '
                . 'WHERE s.id = :sship '
                . $where
                . 'AND v.status = 1 AND u.status = :userStatus ');
        $q->setParameter('sship', $scholarshipid);
        $q->setParameter('userStatus', 'active');

        if ( $videoTitle ) {
            $q->setParameter('videoTitle', "%$videoTitle%");
        }
        
        if ( $email ) {
            $q->setParameter('email', '%' . $email . '%');
        }
        
        if ( $category ) {
            $q->setParameter('videoCategory', $category->getId());
        }               
        
        return $q->getSingleScalarResult();
    }    
    
}
